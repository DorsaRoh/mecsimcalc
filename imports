import pandas
import pandas as pd
import numpy as np
import numpy
import scipy.stats as st
import sklearn
from sklearn.linear_model import LogisticRegression
import matplotlib
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
import matplotlib.mlab as mlab
import sklearn.metrics
from numpy import ravel
from sklearn import metrics
from sklearn.decomposition import PCA
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn import metrics
from sklearn.metrics import accuracy_score
from sklearn import tree
import sys
import warnings
from sklearn import preprocessing, model_selection
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.metrics import classification_report, accuracy_score
from sklearn import model_selection
from pandas.plotting import scatter_matrix
import matplotlib.pyplot as plt
from sklearn.datasets import load_breast_cancer
from sys import argv
import time
startTime = time.time()
import base64
import io
from scipy.integrate import solve_ivp
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.tri as mtri
from scipy.integrate import odeint
from matplotlib import animation
from matplotlib.colors import cnames
from matplotlib import cm
from scipy import integrate
import matplotlib.colors as colors
import matplotlib.cm as cmx
import matplotlib as mpl
import os
def plt_show(plt, width, dpi=100):
    bytes = io.BytesIO()
    plt.savefig(bytes, format='png', dpi=dpi)
    if hasattr(plt, "close"):
        plt.close()
    bytes.seek(0)
    base64_string = "data:image/png;base64," + \
        base64.b64encode(bytes.getvalue()).decode("utf-8")
    return "<img src='" + base64_string + "' width='" + str(width) + "'>"
